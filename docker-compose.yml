version: '4'
#version: '3.8'

services:

  #  Local setup
  auth-service:
    build:
      context: ./auth-microservice
      dockerfile: Dockerfile
    container_name: auth-mc-container
    ports:
      - "8081:8081"
    labels:
      application: "auth-mc"
#    depends_on:
#      mongodb-auth-mc:
#        condition: service_healthy
#    networks:
#      - app-network
#      - monitoring-network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-container
    ports:
      - "8080:8080"
    labels:
      application: "api-gateway"
#    networks:
#      - app-network
#      - monitoring-network
    restart: unless-stopped

  price_predictor:
    build:
      context: "D:/Program Files/PycharmProjects/Price_predictor" #TODO changge to your predition project directory
      dockerfile: Dockerfile
    container_name: prediction-mc-container
    ports:
      - "5000:5000"
  #    networks:
  #      - app-network
  #      - monitoring-network
    restart: unless-stopped

# IMAGE PRODUCTION USE
  #  auth-service:
  #    image: your-auth-service-image # Replace with actual image
  #    container_name: auth-service
  #    ports:
  #      - "8081:8081"
#      labels:
#        application: "auth-service"
#      environment:
#        SPRING_PROFILES_ACTIVE: "docker"
  #    networks:
  #      - monitoring
  #    restart: unless-stopped
  #
  #  # Example API Gateway Service (replace with your actual service)
  #  api-gateway:
  #    image: your-api-gateway-image # Replace with actual image
  #    container_name: api-gateway
  #    ports:
  #      - "8080:8080"
  #    labels:
  #      application: "api-gateway"
  #    environment:
  #      SPRING_PROFILES_ACTIVE: "docker"
  #    networks:
  #      - monitoring
  #    restart: unless-stopped

#  Databases
  mongodb-auth-mc:
    image: mongo:5.0
    container_name: mongodb-auth-mc
    ports:
      - "27019:27017" # Exposes MongoDB on port 27018
    volumes:
      - mongodb-auth-mc-data:/data/db
#    networks:
#      - app-network
    restart: unless-stopped

  mongodb-prediction-mc:
    image: mongo:5.0
    container_name: mongodb-prediction-mc
    ports:
      - "27018:27017"
    volumes:
      - mongodb-prediction-mc-data:/data/db
#    networks:
#      - app-network
    restart: unless-stopped

  redis-prediction-mc:
    image: redis
    container_name: redis-prediction-mc
    ports:
      - "6379:6379"
    volumes:
      - redis-prediction-mc-data:/data
#    networks:
#      - app-network
    restart: unless-stopped

#Monitoring
  # Prometheus Service
  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#    networks:
#      - monitoring-network
#      - app-network
    restart: unless-stopped

  # Loki Service (for logging)
  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
#    networks:
#      - monitoring-network
#      - app-network
    restart: unless-stopped

  # Grafana Service (for dashboards)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
#    networks:
#      - monitoring-network
#      - app-network
    restart: unless-stopped

  tempo:
    image: grafana/tempo:2.2.2
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
#    networks:
#      - monitoring-network
#      - app-network
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./data/tempo:/tmp/tempo
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin TODO FIX IT because it map to localhost and there is no image running of it it is explisicly put

#Networks
#networks:
#  app-network:
#    driver: bridge
#  monitoring-network:
#    driver: bridge


#Volumes
volumes:
  mongodb-auth-mc-data:
    driver: local
  mongodb-prediction-mc-data:
    driver: local
  redis-prediction-mc-data:
    driver: local